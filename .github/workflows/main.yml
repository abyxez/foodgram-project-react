name: Foodgram workflow

on:
  push:
    branches:
      - main
      - master

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set Up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip
        pip install flake8
        pip install isort
        cd backend/
        pip install -r requirements.txt 
    - name: Test with flake8 and django tests
      run: |
        python -m flake8
        python -m isort
  
  
  build_and_push_backend_to_Dockerhub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend

  build_and_push_frontend_to_DockerHub:
    name: Building front image and pushing it to Docker Hub
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push "foodgram/frontend" to DockerHub
      uses: docker/build-push-action@v4
      with:
        context: frontend/
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend



  deploy:
    runs-on: ubuntu-latest
    needs: 
      - build_and_push_backend_to_Dockerhub
      - build_and_push_frontend_to_DockerHub

    if: github.ref == 'refs/heads/master'
    steps:
      - name: executing remote ssh commands to deploy
        # uses: appleboy/ssh-action@master
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          command: |
          cd projects/foodgram/
          echo DEBUG=${{ secrets.DEBUG }} > .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env

          sudo docker-compose stop
          sudo docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs sudo docker rm
          sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
          sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
          sudo docker-compose up -d
          sudo docker image prune -a
          rm -f .env


  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой успешно выполнен!
